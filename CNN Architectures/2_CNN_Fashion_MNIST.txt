1. Imports:
The necessary libraries and modules are imported, including PyTorch for building neural networks, dataset utilities, data loaders, and various functions for model optimization and transformation. Torchvision is also used to access the FashionMNIST dataset and convert the images into tensors.
2. Device Setup:
The code checks if a GPU (CUDA) is available. If a GPU is detected, the model will run on it, providing faster computation. Otherwise, it will default to the CPU.
3. Data Loading:
The FashionMNIST dataset (a popular dataset for benchmarking machine learning models) is loaded, with the training and testing data separated. Each image in the dataset is transformed into a tensor format, and if the dataset is not already present locally, it is downloaded. Basic dataset information like the number of samples, image size, and number of classes is printed.
4. DataLoader Setup:
DataLoaders are set up for the training and testing datasets, allowing the data to be efficiently loaded in batches (in this case, with a batch size of 50). Shuffling ensures that data is randomly arranged at the start of each epoch, while parallel data loading is handled by a single worker thread.
5. CNN Model Definition:
A Convolutional Neural Network (CNN) architecture is defined. The model has two convolutional layers (for feature extraction) followed by a dropout layer (to prevent overfitting). Afterward, two fully connected (dense) layers handle classification. The forward pass function defines how data moves through the model layers, using ReLU (rectified linear unit) activations and softmax for output.
6. Training and Testing Functions:
The training function processes data in batches, computes the loss, performs backpropagation to update weights, and prints the loss for every 20 batches. The testing function, on the other hand, evaluates the model's performance on the test dataset, calculates the average loss, and computes the accuracy.
7. Image Prediction:
A helper function allows you to input specific image indices from the dataset, perform a prediction, and display the images with their predicted class names (such as 'T-shirt', 'Sneaker', etc.). This demonstrates how well the model can classify individual images after training.
8. Training for 10 Epochs:
The model is trained for 10 epochs, with each epoch processing the entire training dataset once. After each epoch, the model is tested on the test set to evaluate its performance. After 10 epochs, the model achieves around 81% accuracy on the test data.
9. Model Architecture:
The CNN architecture consists of 10 convolutional layers (Conv1 through Conv10) for feature extraction, each followed by max-pooling to reduce spatial dimensions. After these convolutional layers, the model has 10 fully connected (dense) layers that gradually reduce the dimensionality until the final layer, which outputs probabilities for the 10 FashionMNIST classes.
